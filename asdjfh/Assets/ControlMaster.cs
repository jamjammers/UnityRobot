//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/ControlMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlMaster"",
    ""maps"": [
        {
            ""name"": ""Player 1"",
            ""id"": ""24a12d97-2828-4118-bf72-fab9695c0692"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""785f0aaf-8d0a-4225-ae83-d599d136635b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""14cf3de4-b670-452b-8207-469f433e150c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rotate"",
                    ""type"": ""Value"",
                    ""id"": ""b83e641c-28bb-4b63-8ad0-04bf3a54aff8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""grabAll"",
                    ""type"": ""Button"",
                    ""id"": ""cb499202-af1d-4f14-9787-07bc359d4211"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""grabL"",
                    ""type"": ""Button"",
                    ""id"": ""523ec919-f7e5-4024-998f-a4284a659852"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""grabR"",
                    ""type"": ""Button"",
                    ""id"": ""5c449f65-263f-4db6-a7c4-6c4b934505d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f25aed7c-d330-4430-9f27-e3356cc85d29"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0b2d4931-ffdf-417e-adf3-da75f2668733"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""099b7559-e7e8-4e4e-8898-6777644d06dd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a67cdbbb-e0af-46c8-b576-6ff73fd8385c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""06c97fb2-e83d-4c23-a00c-b9c7947b4379"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""01d9b9c0-fa1c-408c-8971-f3dba38f93af"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f9aa3f78-466c-41d9-8463-73f76975a499"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a0d6003-ee32-4134-9c3c-8f059c053e29"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""845f183e-3e99-4f77-923d-d75ba1301fda"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f97e1263-fe6b-4ff7-8444-978cbec6f33c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f12096ed-c69c-4ab8-9a08-0dc5da7cadd9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""57553add-ea8e-4c5a-8054-6c6f146b2602"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""02c4de99-6cf3-47c2-9a20-ee5e2cc52e8e"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""10099bc8-c234-424c-b782-2ff189630ff5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ca3c95ba-4438-405f-bb22-ebce18b479c5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d901a3ec-e7cc-4f05-ac41-e45ac8b56f84"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2f25b712-3e38-4cbc-b934-4d0a9a3c651f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""513bc439-0300-465b-b46b-4667798d73d2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""994b1948-c858-46d7-94da-4fc8f14539d1"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""grabAll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73e1a9df-a541-42f6-b7ef-7a09c8bdf286"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""grabL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8d46c7f-cdcb-4cf6-874d-b8e92ade36c5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""8BitDo (XBOX Bluetooth)"",
                    ""action"": ""grabR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""8BitDo (XBOX Bluetooth)"",
            ""bindingGroup"": ""8BitDo (XBOX Bluetooth)"",
            ""devices"": [
                {
                    ""devicePath"": ""<XboxOneGampadiOS>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XboxOneGamepadAndroid>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player 1
        m_Player1 = asset.FindActionMap("Player 1", throwIfNotFound: true);
        m_Player1_move = m_Player1.FindAction("move", throwIfNotFound: true);
        m_Player1_Reset = m_Player1.FindAction("Reset", throwIfNotFound: true);
        m_Player1_rotate = m_Player1.FindAction("rotate", throwIfNotFound: true);
        m_Player1_grabAll = m_Player1.FindAction("grabAll", throwIfNotFound: true);
        m_Player1_grabL = m_Player1.FindAction("grabL", throwIfNotFound: true);
        m_Player1_grabR = m_Player1.FindAction("grabR", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player 1
    private readonly InputActionMap m_Player1;
    private IPlayer1Actions m_Player1ActionsCallbackInterface;
    private readonly InputAction m_Player1_move;
    private readonly InputAction m_Player1_Reset;
    private readonly InputAction m_Player1_rotate;
    private readonly InputAction m_Player1_grabAll;
    private readonly InputAction m_Player1_grabL;
    private readonly InputAction m_Player1_grabR;
    public struct Player1Actions
    {
        private @ControlMaster m_Wrapper;
        public Player1Actions(@ControlMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_Player1_move;
        public InputAction @Reset => m_Wrapper.m_Player1_Reset;
        public InputAction @rotate => m_Wrapper.m_Player1_rotate;
        public InputAction @grabAll => m_Wrapper.m_Player1_grabAll;
        public InputAction @grabL => m_Wrapper.m_Player1_grabL;
        public InputAction @grabR => m_Wrapper.m_Player1_grabR;
        public InputActionMap Get() { return m_Wrapper.m_Player1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer1Actions instance)
        {
            if (m_Wrapper.m_Player1ActionsCallbackInterface != null)
            {
                @move.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnMove;
                @move.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnMove;
                @move.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnMove;
                @Reset.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnReset;
                @rotate.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnRotate;
                @rotate.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnRotate;
                @rotate.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnRotate;
                @grabAll.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnGrabAll;
                @grabAll.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnGrabAll;
                @grabAll.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnGrabAll;
                @grabL.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnGrabL;
                @grabL.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnGrabL;
                @grabL.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnGrabL;
                @grabR.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnGrabR;
                @grabR.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnGrabR;
                @grabR.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnGrabR;
            }
            m_Wrapper.m_Player1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
                @rotate.started += instance.OnRotate;
                @rotate.performed += instance.OnRotate;
                @rotate.canceled += instance.OnRotate;
                @grabAll.started += instance.OnGrabAll;
                @grabAll.performed += instance.OnGrabAll;
                @grabAll.canceled += instance.OnGrabAll;
                @grabL.started += instance.OnGrabL;
                @grabL.performed += instance.OnGrabL;
                @grabL.canceled += instance.OnGrabL;
                @grabR.started += instance.OnGrabR;
                @grabR.performed += instance.OnGrabR;
                @grabR.canceled += instance.OnGrabR;
            }
        }
    }
    public Player1Actions @Player1 => new Player1Actions(this);
    private int m__8BitDoXBOXBluetoothSchemeIndex = -1;
    public InputControlScheme _8BitDoXBOXBluetoothScheme
    {
        get
        {
            if (m__8BitDoXBOXBluetoothSchemeIndex == -1) m__8BitDoXBOXBluetoothSchemeIndex = asset.FindControlSchemeIndex("8BitDo (XBOX Bluetooth)");
            return asset.controlSchemes[m__8BitDoXBOXBluetoothSchemeIndex];
        }
    }
    public interface IPlayer1Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnGrabAll(InputAction.CallbackContext context);
        void OnGrabL(InputAction.CallbackContext context);
        void OnGrabR(InputAction.CallbackContext context);
    }
}
